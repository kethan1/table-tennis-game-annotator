[tool.poetry]
name = "table-tennis-game-annotater"
version = "0.0.1"
description = "Live annotation software for table tennis games"
authors = ["Kethan Vegunta <kethan@vegunta.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/kethan1/table-tennis-game-annotator"


[tool.poetry.dependencies]
python = ">=3.8,<3.11"
opencv-python = "^4.6.0"
Pillow = "^9.2.0"
Flask = "^2.1.2"
torch = "^1.12.0"
pandas = "^1.4.3"
matplotlib = "^3.5.2"
PyYAML = "^6.0"
requests = "^2.28.1"
scipy = "^1.8.1"
torchvision = "^0.13.0"
protobuf = "<4.21.3"
seaborn = "^0.11.2"
imagesize = "^1.4.1"

[tool.poetry.dev-dependencies]
tqdm = "^4.64.0"

[tool.poe.tasks.watch]
shell = "npx parcel watch templates/*.html --no-source-maps --dist-dir dist"
interpreter = ["powershell", "posix"]

[tool.poe.tasks.build]
shell = "npx parcel build templates/*.html --no-source-maps --dist-dir dist"
interpreter = ["powershell", "posix"]

[tool.poe.tasks.server]
shell = "poetry run python app.py"
interpreter = ["powershell", "posix"]

[tool.poe.tasks.build_basic_wasm]
shell = '''python os_switcher.py --windows 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=basic -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && move yolov5* ../static/wasm_modules && cd .. && del /s /q build > NUL && rmdir /s /q build' --linux 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=basic -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && mv yolov5* ../static/wasm_modules && cd .. && rm -r build''''
interpreter = ["powershell", "posix"]

[tool.poe.tasks.build_simd_wasm]
shell = '''python os_switcher.py --windows 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=simd -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && move yolov5* ../static/wasm_modules && cd .. && del /s /q build > NUL && rmdir /s /q build' --linux 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=simd -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && mv yolov5* ../static/wasm_modules && cd .. && rm -r build''''
interpreter = ["powershell", "posix"]

[tool.poe.tasks.build_threads_wasm]
shell = '''python os_switcher.py --windows 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=threads -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && move yolov5* ../static/wasm_modules && cd .. && del /s /q build > NUL && rmdir /s /q build' --linux 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=threads -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && mv yolov5* ../static/wasm_modules && cd .. && rm -r build''''
interpreter = ["powershell", "posix"]

[tool.poe.tasks.build_simd_threads_wasm]
shell = '''python os_switcher.py --windows 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=simd-threads -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && move yolov5* ../static/wasm_modules && cd .. && del /s /q build > NUL && rmdir /s /q build' --linux 'mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=\"{env:EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" -DWASM_FEATURE=simd-threads -G \"Unix Makefiles\" .. && cmake --build . --config Release -j 4 && mv yolov5* ../static/wasm_modules && cd .. && rm -r build''''
interpreter = ["powershell", "posix"]

[tool.poe.tasks.build_wasm]
shell = "poetry poe build_basic && poetry poe build_simd && poetry poe build_threads && poetry poe build_simd_threads"
interpreter = ["powershell", "posix"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
